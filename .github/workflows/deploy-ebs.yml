name: Deploy to AWS Elastic Beanstalk

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, staging, prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirement-dev.txt
          pytest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment variables
        run: |
          echo "APP_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          # Add more as needed

      - name: Ensure S3 bucket exists
        run: |
          BUCKET_NAME=fast-api-ebs-poc-${{ github.event.inputs.environment }}
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ secrets.AWS_REGION }} --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          fi

      - name: Build Docker image
        run: |
          docker build -t fast-api-ebs-poc:${{ github.ref_name }} .

      - name: Create Dockerrun.aws.json
        run: |
          echo '{
            "AWSEBDockerrunVersion": 1,
            "Image": {
              "Name": "fast-api-ebs-poc:${{ github.ref_name }}",
              "Update": "true"
            },
            "Ports": [
              {"ContainerPort": 8000}
            ]
          }' > Dockerrun.aws.json
          zip deploy.zip Dockerrun.aws.json

      - name: Upload to S3
        run: |
          BUCKET_NAME=fast-api-ebs-poc-${{ github.event.inputs.environment }}
          aws s3 cp deploy.zip s3://$BUCKET_NAME/deploy-${{ github.sha }}.zip

      - name: Deploy to Elastic Beanstalk
        run: |
          ENV_NAME=fast-api-ebs-poc-${{ github.event.inputs.environment }}
          aws elasticbeanstalk create-application-version \
            --application-name fast-api-ebs-poc \
            --version-label "${{ github.sha }}" \
            --source-bundle S3Bucket=$BUCKET_NAME,S3Key=deploy-${{ github.sha }}.zip
          aws elasticbeanstalk update-environment \
            --environment-name $ENV_NAME \
            --version-label "${{ github.sha }}"

      - name: Monitor deployment and rollback on failure
        run: |
          ENV_NAME=fast-api-ebs-poc-${{ github.event.inputs.environment }}
          STATUS=""
          for i in {1..30}; do
            STATUS=$(aws elasticbeanstalk describe-environments --environment-names $ENV_NAME --query 'Environments[0].Health' --output text)
            if [[ "$STATUS" == "Green" ]]; then
              echo "Deployment succeeded!"
              exit 0
            elif [[ "$STATUS" == "Red" ]]; then
              echo "Deployment failed, rolling back..."
              PREV_VERSION=$(aws elasticbeanstalk describe-environments --environment-names $ENV_NAME --query 'Environments[0].VersionLabel' --output text)
              aws elasticbeanstalk update-environment --environment-name $ENV_NAME --version-label $PREV_VERSION
              exit 1
            fi
            sleep 10
          done
          echo "Deployment timed out."
          exit 1

    if: |
      github.event.inputs.environment == 'dev' ||
      (github.event.inputs.environment != 'dev' && github.ref == 'refs/heads/main') 